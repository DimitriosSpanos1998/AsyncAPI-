"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertPostman = exports.convertOpenAPI = exports.convert = void 0;
const js_yaml_1 = require("js-yaml");
const first_version_1 = require("./first-version");
const second_version_1 = require("./second-version");
const third_version_1 = require("./third-version");
const openapi_1 = require("./openapi");
const postman_collection_1 = require("./postman-collection");
const utils_1 = require("./utils");
/**
 * Value for key (version) represents the function which converts specification from previous version to the given as key.
 */
const asyncAPIconverters = Object.assign(Object.assign(Object.assign({}, first_version_1.converters), second_version_1.converters), third_version_1.converters);
const conversionVersions = Object.keys(asyncAPIconverters);
function convert(input, version, options = {}) {
    const { format, document } = (0, utils_1.serializeInput)(input);
    const asyncapiVersion = document.asyncapi;
    let fromVersion = conversionVersions.indexOf(asyncapiVersion);
    const toVersion = conversionVersions.indexOf(version);
    if (fromVersion === -1 || toVersion === -1) {
        throw new Error(`Cannot convert from ${asyncapiVersion} to ${version}.`);
    }
    if (fromVersion > toVersion) {
        throw new Error(`Cannot downgrade from ${asyncapiVersion} to ${version}.`);
    }
    if (fromVersion === toVersion) {
        throw new Error(`Cannot convert to the same version.`);
    }
    // add 1 to `fromVersion` because we convert from previous to next
    fromVersion++;
    let converted = document;
    for (let i = fromVersion; i <= toVersion; i++) {
        const v = conversionVersions[i];
        converted = asyncAPIconverters[v](converted, options);
    }
    if (format === 'yaml') {
        return (0, js_yaml_1.dump)(converted, { skipInvalid: true });
    }
    return converted;
}
exports.convert = convert;
function convertOpenAPI(input, version, options = {}) {
    const { format, document } = (0, utils_1.serializeInput)(input);
    const openApiVersion = document.openapi;
    const converterVersion = openApiVersion;
    const openapiToAsyncapiConverter = openapi_1.converters[converterVersion];
    if (!openapiToAsyncapiConverter) {
        throw new Error(`We are not able to convert OpenAPI ${converterVersion} to AsyncAPI, please raise a feature request.`);
    }
    const convertedAsyncAPI = openapiToAsyncapiConverter(document, options);
    if (format === "yaml") {
        return (0, js_yaml_1.dump)(convertedAsyncAPI, { skipInvalid: true });
    }
    return convertedAsyncAPI;
}
exports.convertOpenAPI = convertOpenAPI;
function convertPostman(input, version, options = {}) {
    const { format, document } = (0, utils_1.serializeInput)(input);
    const postmantoAsyncapiConverter = postman_collection_1.converters[version];
    const convertedAsyncAPI = postmantoAsyncapiConverter(document, options);
    if (format === "yaml") {
        return (0, js_yaml_1.dump)(convertedAsyncAPI, { skipInvalid: true });
    }
    return convertedAsyncAPI;
}
exports.convertPostman = convertPostman;
